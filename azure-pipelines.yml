# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test_Windows'
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
        tox.env: 'py35-mac_windows'
      Python36:
        python.version: '3.6'
        tox.env: 'py36-mac_windows'
      Python37:
        python.version: '3.7'
        tox.env: 'py37-mac_windows'
      Python38:
        python.version: '3.8'
        tox.env: 'py38-mac_windows'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: mkdir c:\gcc
    displayName: "make gcc dir"

  - script: curl -L -o gcc-arm-none-eabi.zip https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2017q4/gcc-arm-none-eabi-7-2017-q4-major-win32.zip?revision=df1b65d3-7c8d-4e82-b114-e0b6ad7c2e6d?product=GNU%20Arm%20Embedded%20Toolchain,ZIP,,Windows,7-2017-q4-major
    displayName: "Download gcc-arm"

  - script: unzip -o gcc-arm-none-eabi.zip -d c:\gcc\
    displayName: "unzip gcc"

  - script: python -m pip install --upgrade pip && pip install -U setuptools
    displayName: 'Install dependencies'

  - script: pip install tox
    displayName: "Install tox"

  - script: |
      set PATH=%PATH%;c:\gcc\bin
      tox -r -e$(tox.env)
    displayName: 'Run tests'

- job: 'Test_OSX'
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
        tox.env: 'py35-mac_windows'
      Python36:
        python.version: '3.6'
        tox.env: 'py36-mac_windows'
      Python37:
        python.version: '3.7'
        tox.env: 'py37-mac_windows'
      Python38:
        python.version: '3.8'
        tox.env: 'py38-mac_windows'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip && pip install -U setuptools && pip install -r build_requirements.txt
    displayName: 'Install dependencies'

  - script: |
      brew tap PX4/px4
      brew install px4/px4/gcc-arm-none-eabi
      which arm-none-eabi-gcc
    displayName: "Install GCC with brew"

  - script: pip install tox
    displayName: "Install tox"

  - script: tox -r -e$(tox.env)
    displayName: "Run tests"
